package dev.tamnguyen.tool;

import java.io.IOException;
import java.io.PrintWriter;
import java.time.Instant;
import java.util.Arrays;
import java.util.List;

public class GenerateAst {

    public static void main(String[] args) throws IOException {
        if (args.length != 1) {
            System.err.println("Usage: generate_ast <output directory>");
            System.exit(64);
        }

        String outputDir = args[0];
        defineAst(outputDir, "Expr", Arrays.asList(
                "Binary   : Expr left, Token operator, Expr right",
                "Grouping : Expr expression",
                "Literal  : Object value",
                "Unary    : Token operator, Expr right"
        ));
    }

    private static void defineAst(String outputDir, String baseName, List<String> types) throws IOException {
        String path = outputDir + "/" + baseName + ".java";
        try (PrintWriter writer = new PrintWriter(path, "UTF-8")) {
            String generatedTime = Instant.now().toString();
            String generatedBy = GenerateAst.class.getName();

            writer.println("/*");
            writer.println(" * AUTO-GENERATED FILE.  DO NOT MODIFY.");
            writer.println(" *");
            writer.println(" * This class was automatically generated by " + generatedBy);
            writer.println(" * Generated on " + generatedTime);
            writer.println("*/");
            writer.println();

            writer.println("package dev.tamnguyen.lox;");
            writer.println();

            writer.println("import java.util.List;");
            writer.println("import javax.annotation.processing.Generated;");
            writer.println();

            writer.println("@Generated(");
            writer.println("    value=\"" + generatedBy + "\",");
            writer.println("    date=\"" + generatedTime + "\",");
            writer.println("    comments = \"Do not modify this class.\"");
            writer.println(")");
            writer.println("public abstract class " + baseName + " {");

            defineVisitor(writer, baseName, types);

            //> Define subclasses
            for (String type : types) {
                String className = type.split(":")[0].trim();
                String fields = type.split(":")[1].trim();
                defineType(writer, baseName, className, fields);
            }
            //< Define subclasses

            // The base accept() method
            writer.println();
            writer.println(" public abstract <R> R accept(Visitor<R> visitor);");

            writer.println("}");
        }
    }

    private static void defineType(PrintWriter writer, String baseName, String className, String fieldList) throws IOException {
        writer.println("    public static class " + className + " extends " + baseName + " {");

        // constructor
        writer.println("        public " + className + "(" + fieldList + ") {");

        String[] fields = fieldList.split(", ");

        // stores parameter in fields.
        for (String field : fields) {
            String name = field.split(" ")[1];
            writer.println("            this." + name + "=" + name + ";");
        }

        writer.println("        }");

        // fields
        for (String field : fields) {
            writer.println("      private final " + field + ";");
        }

        // getters
        for (String field : fields) {
            String type = field.split(" ")[0];
            String name = field.split(" ")[1];
            writer.println("      public " + type + " get" + capitalizeFirst(name) + "() {");
            writer.println("          return this." + name + ";");
            writer.println("        }");
        }

        // method
        writer.println();
        writer.println("  @Override");
        writer.println(" public <R> R accept(Visitor<R> visitor) {");
        writer.println("      return visitor.visit"
                + className + baseName + "(this);");
        writer.println("    }");

        writer.println("    }");
    }

    private static void defineVisitor(PrintWriter writer, String baseName, List<String> types) throws IOException {
        writer.println("    public interface Visitor<R> {");

        for (String type : types) {
            String typeName = type.split(":")[0].trim();
            writer.println("        R visit" + typeName + baseName + "("
                    + typeName + " " + baseName.toLowerCase() + ");");
        }

        writer.println("    }");
    }

    public static String capitalizeFirst(String str) {
        if (str == null || str.isEmpty()) {
            return str;
        }
        return str.substring(0, 1).toUpperCase() + str.substring(1);
    }
}
