/*
 * AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by dev.tamnguyen.tool.GenerateAst
 * Generated on 2025-08-12T14:16:41.484254Z
*/

package dev.tamnguyen.lox;

import java.util.List;
import javax.annotation.processing.Generated;
import lombok.Getter;
import lombok.AllArgsConstructor;

/**
 * Abstract syntax tree node
 *
 */
@Generated(
    value="dev.tamnguyen.tool.GenerateAst",
    date="2025-08-12T14:16:41.484254Z",
    comments = "Do not modify this class."
)
public abstract class Stmt {
    public interface Visitor<R> {
        R visitBlockStmt(Block stmt);
        R visitExpressionStmt(Expression stmt);
        R visitIfStmt(If stmt);
        R visitPrintStmt(Print stmt);
        R visitVarStmt(Var stmt);
        R visitWhileStmt(While stmt);
        R visitBreakStmt(Break stmt);
        R visitContinueStmt(Continue stmt);
        R visitFunctionStmt(Function stmt);
        R visitReturnStmt(Return stmt);
    }

    @AllArgsConstructor
    @Getter
    public static class Block extends Stmt {
        private final List<Stmt> statements;

        @Override
        public <R> R accept(Visitor<R> visitor) {
            return visitor.visitBlockStmt(this);
        }
    }

    @AllArgsConstructor
    @Getter
    public static class Expression extends Stmt {
        private final Expr expression;

        @Override
        public <R> R accept(Visitor<R> visitor) {
            return visitor.visitExpressionStmt(this);
        }
    }

    @AllArgsConstructor
    @Getter
    public static class If extends Stmt {
        private final Expr condition;
        private final Stmt thenBranch;
        private final Stmt elseBranch;

        @Override
        public <R> R accept(Visitor<R> visitor) {
            return visitor.visitIfStmt(this);
        }
    }

    @AllArgsConstructor
    @Getter
    public static class Print extends Stmt {
        private final Expr expression;

        @Override
        public <R> R accept(Visitor<R> visitor) {
            return visitor.visitPrintStmt(this);
        }
    }

    @AllArgsConstructor
    @Getter
    public static class Var extends Stmt {
        private final Token name;
        private final Expr initializer;

        @Override
        public <R> R accept(Visitor<R> visitor) {
            return visitor.visitVarStmt(this);
        }
    }

    @AllArgsConstructor
    @Getter
    public static class While extends Stmt {
        private final Expr condition;
        private final Stmt body;

        @Override
        public <R> R accept(Visitor<R> visitor) {
            return visitor.visitWhileStmt(this);
        }
    }

    @AllArgsConstructor
    @Getter
    public static class Break extends Stmt {
        private final Token keyword;

        @Override
        public <R> R accept(Visitor<R> visitor) {
            return visitor.visitBreakStmt(this);
        }
    }

    @AllArgsConstructor
    @Getter
    public static class Continue extends Stmt {
        private final Token keyword;

        @Override
        public <R> R accept(Visitor<R> visitor) {
            return visitor.visitContinueStmt(this);
        }
    }

    @AllArgsConstructor
    @Getter
    public static class Function extends Stmt {
        private final Token name;
        private final List<Token> params;
        private final List<Stmt> body;

        @Override
        public <R> R accept(Visitor<R> visitor) {
            return visitor.visitFunctionStmt(this);
        }
    }

    @AllArgsConstructor
    @Getter
    public static class Return extends Stmt {
        private final Token keyword;
        private final Expr value;

        @Override
        public <R> R accept(Visitor<R> visitor) {
            return visitor.visitReturnStmt(this);
        }
    }


    public abstract <R> R accept(Visitor<R> visitor);
}
