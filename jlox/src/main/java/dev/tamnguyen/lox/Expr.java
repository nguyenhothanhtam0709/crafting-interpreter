/*
 * AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by dev.tamnguyen.tool.GenerateAst
 * Generated on 2025-08-11T06:30:38.182291814Z
*/

package dev.tamnguyen.lox;

import java.util.List;
import javax.annotation.processing.Generated;
import lombok.Getter;
import lombok.AllArgsConstructor;

/**
 * Abstract syntax tree node
 *
 */
@Generated(
    value="dev.tamnguyen.tool.GenerateAst",
    date="2025-08-11T06:30:38.182291814Z",
    comments = "Do not modify this class."
)
public abstract class Expr {
    public interface Visitor<R> {
        R visitAssignExpr(Assign expr);
        R visitBinaryExpr(Binary expr);
        R visitGroupingExpr(Grouping expr);
        R visitLiteralExpr(Literal expr);
        R visitUnaryExpr(Unary expr);
        R visitConditionalExpr(Conditional expr);
        R visitVariableExpr(Variable expr);
    }

    @AllArgsConstructor
    @Getter
    public static class Assign extends Expr {
        private final Token name;
        private final Expr value;

        @Override
        public <R> R accept(Visitor<R> visitor) {
            return visitor.visitAssignExpr(this);
        }
    }

    @AllArgsConstructor
    @Getter
    public static class Binary extends Expr {
        private final Expr left;
        private final Token operator;
        private final Expr right;

        @Override
        public <R> R accept(Visitor<R> visitor) {
            return visitor.visitBinaryExpr(this);
        }
    }

    @AllArgsConstructor
    @Getter
    public static class Grouping extends Expr {
        private final Expr expression;

        @Override
        public <R> R accept(Visitor<R> visitor) {
            return visitor.visitGroupingExpr(this);
        }
    }

    @AllArgsConstructor
    @Getter
    public static class Literal extends Expr {
        private final Object value;

        @Override
        public <R> R accept(Visitor<R> visitor) {
            return visitor.visitLiteralExpr(this);
        }
    }

    @AllArgsConstructor
    @Getter
    public static class Unary extends Expr {
        private final Token operator;
        private final Expr right;

        @Override
        public <R> R accept(Visitor<R> visitor) {
            return visitor.visitUnaryExpr(this);
        }
    }

    @AllArgsConstructor
    @Getter
    public static class Conditional extends Expr {
        private final Expr condExpr;
        private final Expr thenExpr;
        private final Expr elseExpr;

        @Override
        public <R> R accept(Visitor<R> visitor) {
            return visitor.visitConditionalExpr(this);
        }
    }

    @AllArgsConstructor
    @Getter
    public static class Variable extends Expr {
        private final Token name;

        @Override
        public <R> R accept(Visitor<R> visitor) {
            return visitor.visitVariableExpr(this);
        }
    }


    public abstract <R> R accept(Visitor<R> visitor);
}
