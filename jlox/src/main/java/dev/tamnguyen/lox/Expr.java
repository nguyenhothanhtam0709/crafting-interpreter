/*
 * AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by dev.tamnguyen.tool.GenerateAst
 * Generated on 2025-08-09T18:44:32.024228Z
*/

package dev.tamnguyen.lox;

import java.util.List;
import javax.annotation.processing.Generated;

@Generated(
    value="dev.tamnguyen.tool.GenerateAst",
    date="2025-08-09T18:44:32.024228Z",
    comments = "Do not modify this class."
)
public abstract class Expr {
    public interface Visitor<R> {
        R visitBinaryExpr(Binary expr);
        R visitGroupingExpr(Grouping expr);
        R visitLiteralExpr(Literal expr);
        R visitUnaryExpr(Unary expr);
    }
    public static class Binary extends Expr {
        public Binary(Expr left, Token operator, Expr right) {
            this.left=left;
            this.operator=operator;
            this.right=right;
        }
      private final Expr left;
      private final Token operator;
      private final Expr right;
      public Expr getLeft() {
          return this.left;
        }
      public Token getOperator() {
          return this.operator;
        }
      public Expr getRight() {
          return this.right;
        }

  @Override
 public <R> R accept(Visitor<R> visitor) {
      return visitor.visitBinaryExpr(this);
    }
    }
    public static class Grouping extends Expr {
        public Grouping(Expr expression) {
            this.expression=expression;
        }
      private final Expr expression;
      public Expr getExpression() {
          return this.expression;
        }

  @Override
 public <R> R accept(Visitor<R> visitor) {
      return visitor.visitGroupingExpr(this);
    }
    }
    public static class Literal extends Expr {
        public Literal(Object value) {
            this.value=value;
        }
      private final Object value;
      public Object getValue() {
          return this.value;
        }

  @Override
 public <R> R accept(Visitor<R> visitor) {
      return visitor.visitLiteralExpr(this);
    }
    }
    public static class Unary extends Expr {
        public Unary(Token operator, Expr right) {
            this.operator=operator;
            this.right=right;
        }
      private final Token operator;
      private final Expr right;
      public Token getOperator() {
          return this.operator;
        }
      public Expr getRight() {
          return this.right;
        }

  @Override
 public <R> R accept(Visitor<R> visitor) {
      return visitor.visitUnaryExpr(this);
    }
    }

 public abstract <R> R accept(Visitor<R> visitor);
}
